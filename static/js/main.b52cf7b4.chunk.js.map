{"version":3,"sources":["components/Form/Form.jsx","components/WatchCard/WatchCard.jsx","App.js","index.js"],"names":["Form","handleSubmit","handleChange","inputName","className","onSubmit","ref","defaultValue","type","onChange","name","required","placeholder","WatchCard","id","timeZone","handleRemove","onClick","format","addHours","Date","App","useState","dataValue","setDataValue","time","setTime","watches","setWatches","useRef","useEffect","idInterval","setInterval","clearInterval","current","focus","idItem","filter","e","preventDefault","trim","length","Number","validateValue","nanoid","currentTarget","reset","target","value","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAEMA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,UAA/B,OACX,uBAAMC,UAAU,OAAOC,SAAUJ,EAAjC,UACE,uBAAOG,UAAU,aAAjB,gEACA,uBACEE,IAAKH,EACLC,UAAU,aACVG,aAAa,GACbC,KAAK,OACLC,SAAUP,EACVQ,KAAK,OACLC,UAAU,EACVC,YAAY,mCAGd,uBAAOR,UAAU,iBAAjB,8FACA,uBACEA,UAAU,iBACVI,KAAK,SACLC,SAAUP,EACVQ,KAAK,WACLH,aAAa,GACbI,UAAU,EACVC,YAAY,qCAGd,wBAAQR,UAAU,aAAaC,SAAUJ,EAAzC,kE,gBCxBEY,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,KAAMK,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,aAAvB,OAChB,sBAAcZ,UAAU,aAAxB,UACE,mBACEA,UAAU,uBACV,cAAY,OACZa,QAAS,kBAAMD,EAAaF,MAE9B,mBAAGV,UAAU,aAAb,SAA2BM,IAC3B,oBAAGN,UAAU,YAAb,UACG,IACAc,YAAOC,YAAS,IAAIC,KAAQL,GAAW,YACvC,GAHH,IAGQA,OAVAD,I,QC+DGO,G,MA5DH,WACV,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMzB,EAAY0B,mBAClBC,qBAAU,WACR,IAAMC,EAAaC,aAAY,kBAAMN,EAAQ,IAAIN,QAAS,KAC1D,OAAO,kBAAMa,cAAcF,MAC1B,CAACN,IAEJK,qBAAU,WACR3B,EAAU+B,QAAQC,UACjB,IAEH,IAcMnB,EAAe,SAACoB,GACpBR,GAAW,kBAAMD,EAAQU,QAAO,qBAAGvB,KAAgBsB,SAGrD,OACE,sBAAKhC,UAAU,YAAf,UACE,cAAC,EAAD,CACEH,aAbe,SAACqC,GACpBA,EAAEC,iBATkB,WAAO,IAAD,EAC1B,OAAO,UAAAhB,EAAUb,YAAV,eAAgB8B,OAAOC,SAAUC,OAAOnB,EAAUR,UAAY,EASrE4B,IAAmBf,EAAW,GAAD,mBAAKD,GAAL,cAAgBb,GAAI8B,eAAarB,MAC9De,EAAEO,cAAcC,QAChBtB,EAAa,KAUTtB,aAlBe,SAAC,GAAiC,IAAD,IAA9B6C,OAAUrC,EAAoB,EAApBA,KAAMsC,EAAc,EAAdA,MACtCA,EAAMR,QAAUhB,EAAa,2BAAKD,GAAN,kBAAkBb,EAAOsC,MAkBjD7C,UAAWA,IAEb,gCACE,sBAAKC,UAAU,cAAf,wFACkBc,YAAO,IAAIE,KAAQ,eAErC,sBAAKhB,UAAU,oBAAf,UACG,IACAuB,EAAQsB,KAAI,gBAAGvC,EAAH,EAAGA,KAAMK,EAAT,EAASA,SAAUD,EAAnB,EAAmBA,GAAnB,OACX,cAAC,EAAD,CACEE,aAAcA,EACdD,SAAUA,EACVD,GAAIA,EACJJ,KAAMA,GACDI,iBCpDnBoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b52cf7b4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = ({ handleSubmit, handleChange, inputName }) => (\n  <form className=\"form\" onSubmit={handleSubmit}>\n    <label className=\"label-name\"> Название </label>\n    <input\n      ref={inputName}\n      className=\"input-name\"\n      defaultValue=\"\"\n      type=\"text\"\n      onChange={handleChange}\n      name=\"name\"\n      required={true}\n      placeholder=\"Город\"\n    />\n\n    <label className=\"label-timezone\"> Временная зона</label>\n    <input\n      className=\"input-timezone\"\n      type=\"number\"\n      onChange={handleChange}\n      name=\"timeZone\"\n      defaultValue=\"\"\n      required={true}\n      placeholder=\"+ часов\"\n    />\n\n    <button className=\"btn-submit\" onSubmit={handleSubmit}>\n      Добавить\n    </button>\n  </form>\n);\n\nexport { Form };\n","import { addHours, format } from \"date-fns\";\nimport React from \"react\";\n\nconst WatchCard = ({ id, name, timeZone, handleRemove }) => (\n  <div key={id} className=\"watch-card\">\n    <i\n      className=\"fa fa-times-circle-o\"\n      aria-hidden=\"true\"\n      onClick={() => handleRemove(id)}\n    />\n    <i className=\"titleWatch\">{name}</i>\n    <i className=\"dataWatch\">\n      {\" \"}\n      {format(addHours(new Date(), timeZone), \"HH:mm:ss\")}\n      {\"\"}+{timeZone}\n    </i>\n  </div>\n);\n\nexport { WatchCard };\n","import { Form } from \"components/Form\";\nimport { WatchCard } from \"components/WatchCard\";\nimport { nanoid } from \"nanoid\";\nimport { format } from \"date-fns\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"App.css\";\n\nconst App = () => {\n  const [dataValue, setDataValue] = useState({});\n  const [time, setTime] = useState(null);\n  const [watches, setWatches] = useState([]);\n  const inputName = useRef();\n  useEffect(() => {\n    const idInterval = setInterval(() => setTime(new Date()), 1000);\n    return () => clearInterval(idInterval);\n  }, [time]);\n\n  useEffect(() => {\n    inputName.current.focus();\n  }, []);\n\n  const validateValue = () => {\n    return dataValue.name?.trim().length && Number(dataValue.timeZone) > 0;\n  };\n\n  const handleChange = ({ target: { name, value } }) => {\n    value.trim() && setDataValue({ ...dataValue, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    validateValue() && setWatches([...watches, { id: nanoid(), ...dataValue }]);\n    e.currentTarget.reset();\n    setDataValue({});\n  };\n  const handleRemove = (idItem) => {\n    setWatches(() => watches.filter(({ id }) => id !== idItem));\n  };\n\n  return (\n    <div className=\"container\">\n      <Form\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        inputName={inputName}\n      />\n      <div>\n        <div className=\"local-watch\">\n          Местное время: {format(new Date(), \"HH:mm:ss\")}\n        </div>\n        <div className=\"container-watches\">\n          {\" \"}\n          {watches.map(({ name, timeZone, id }) => (\n            <WatchCard\n              handleRemove={handleRemove}\n              timeZone={timeZone}\n              id={id}\n              name={name}\n              key={id}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}