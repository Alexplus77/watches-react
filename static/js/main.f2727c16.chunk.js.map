{"version":3,"sources":["components/Form/Form.jsx","components/WatchCard/WatchCard.jsx","App.js","index.js"],"names":["Form","handleSubmit","handleChange","className","onSubmit","defaultValue","type","onChange","name","required","placeholder","WatchCard","id","timeZone","handleRemove","onClick","format","addHours","Date","App","useState","dataValue","setDataValue","setTime","watches","setWatches","validateValue","trim","length","Number","idInterval","setInterval","idItem","filter","clearInterval","e","preventDefault","nanoid","console","log","currentTarget","reset","target","value","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEMA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAjB,OACX,uBAAMC,UAAU,OAAOC,SAAUH,EAAjC,UACE,uBAAOE,UAAU,aAAjB,gEACA,uBACEA,UAAU,aACVE,aAAa,GACbC,KAAK,OACLC,SAAUL,EACVM,KAAK,OACLC,UAAU,EACVC,YAAY,mCAGd,uBAAOP,UAAU,iBAAjB,8FACA,uBACEA,UAAU,iBACVG,KAAK,SACLC,SAAUL,EACVM,KAAK,WACLH,aAAa,GACbI,UAAU,EACVC,YAAY,qCAGd,wBAAQP,UAAU,aAAaC,SAAUH,EAAzC,kE,QCvBEU,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,KAAMK,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,aAAvB,OAChB,sBAAcX,UAAU,aAAxB,UACE,mBACEA,UAAU,uBACV,cAAY,OACZY,QAAS,kBAAMD,EAAaF,MAE9B,mBAAGT,UAAU,aAAb,SAA2BK,IAC3B,oBAAGL,UAAU,YAAb,UACG,IACAa,YAAOC,YAAS,IAAIC,KAAQL,GAAW,YACvC,GAHH,IAGQA,OAVAD,I,QCsDGO,G,MAnDH,WACV,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAS,MAAjC,mBAAaG,GAAb,WACA,EAA8BH,mBAAS,IAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEMC,EAAgB,WAAO,IAAD,EAC1B,OAAO,UAAAL,EAAUb,YAAV,eAAgBmB,OAAOC,SAAUC,OAAOR,EAAUR,UAAY,GAGjEiB,EAAaC,aAAY,kBAAMR,EAAQ,IAAIL,QAAS,KAapDJ,EAAe,SAACkB,GACpBP,GAAW,kBAAMD,EAAQS,QAAO,qBAAGrB,KAAgBoB,QACnDE,cAAcJ,IAGhB,OACE,sBAAK3B,UAAU,YAAf,UACE,cAAC,EAAD,CAAMF,aAdW,SAACkC,GACpBA,EAAEC,iBACFV,KAAmBD,EAAW,GAAD,mBAAKD,GAAL,cAAgBZ,GAAIyB,eAAahB,MAC9DiB,QAAQC,IAAIb,KACZS,EAAEK,cAAcC,QAChBnB,EAAa,KASuBpB,aAlBjB,SAAC,GAAiC,IAAD,IAA9BwC,OAAUlC,EAAoB,EAApBA,KAAMmC,EAAc,EAAdA,MACtCA,EAAMhB,QAAUL,EAAa,2BAAKD,GAAN,kBAAkBb,EAAOmC,QAkBnD,gCACE,sBAAKxC,UAAU,cAAf,wFACkBa,YAAO,IAAIE,KAAQ,eAErC,sBAAKf,UAAU,oBAAf,UACG,IACAqB,EAAQoB,KAAI,gBAAGpC,EAAH,EAAGA,KAAMK,EAAT,EAASA,SAAUD,EAAnB,EAAmBA,GAAnB,OACX,cAAC,EAAD,CACEE,aAAcA,EACdD,SAAUA,EACVD,GAAIA,EACJJ,KAAMA,GACDI,iBC3CnBiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f2727c16.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = ({ handleSubmit, handleChange }) => (\n  <form className=\"form\" onSubmit={handleSubmit}>\n    <label className=\"label-name\"> Название </label>\n    <input\n      className=\"input-name\"\n      defaultValue=\"\"\n      type=\"text\"\n      onChange={handleChange}\n      name=\"name\"\n      required={true}\n      placeholder=\"Город\"\n    />\n\n    <label className=\"label-timezone\"> Временная зона</label>\n    <input\n      className=\"input-timezone\"\n      type=\"number\"\n      onChange={handleChange}\n      name=\"timeZone\"\n      defaultValue=\"\"\n      required={true}\n      placeholder=\"+ часов\"\n    />\n\n    <button className=\"btn-submit\" onSubmit={handleSubmit}>\n      Добавить\n    </button>\n  </form>\n);\n\nexport { Form };\n","import { addHours, format } from \"date-fns\";\nimport React from \"react\";\n\nconst WatchCard = ({ id, name, timeZone, handleRemove }) => (\n  <div key={id} className=\"watch-card\">\n    <i\n      className=\"fa fa-times-circle-o\"\n      aria-hidden=\"true\"\n      onClick={() => handleRemove(id)}\n    />\n    <i className=\"titleWatch\">{name}</i>\n    <i className=\"dataWatch\">\n      {\" \"}\n      {format(addHours(new Date(), timeZone), \"HH:mm:ss\")}\n      {\"\"}+{timeZone}\n    </i>\n  </div>\n);\n\nexport { WatchCard };\n","import { addHours, format } from \"date-fns\";\nimport { Form } from \"./components/Form\";\nimport { WatchCard } from \"./components/WatchCard\";\nimport { nanoid } from \"nanoid\";\nimport React, { useEffect, useState } from \"react\";\nimport \"App.css\";\n\nconst App = () => {\n  const [dataValue, setDataValue] = useState({});\n  const [time, setTime] = useState(null);\n  const [watches, setWatches] = useState([]);\n\n  const validateValue = () => {\n    return dataValue.name?.trim().length && Number(dataValue.timeZone) > 0;\n  };\n\n  const idInterval = setInterval(() => setTime(new Date()), 1000);\n\n  const handleChange = ({ target: { name, value } }) => {\n    value.trim() && setDataValue({ ...dataValue, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    validateValue() && setWatches([...watches, { id: nanoid(), ...dataValue }]);\n    console.log(validateValue());\n    e.currentTarget.reset();\n    setDataValue({});\n  };\n  const handleRemove = (idItem) => {\n    setWatches(() => watches.filter(({ id }) => id !== idItem));\n    clearInterval(idInterval);\n  };\n\n  return (\n    <div className=\"container\">\n      <Form handleSubmit={handleSubmit} handleChange={handleChange} />\n      <div>\n        <div className=\"local-watch\">\n          Местное время: {format(new Date(), \"HH:mm:ss\")}\n        </div>\n        <div className=\"container-watches\">\n          {\" \"}\n          {watches.map(({ name, timeZone, id }) => (\n            <WatchCard\n              handleRemove={handleRemove}\n              timeZone={timeZone}\n              id={id}\n              name={name}\n              key={id}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}